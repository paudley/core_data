# SPDX-FileCopyrightText: 2025 Blackcat InformaticsÂ® Inc.
# SPDX-License-Identifier: MIT

name: CI
permissions:
  contents: read

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  smoke:
    name: Smoke (${{ matrix.profile_name }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - profile_name: full
            compose_profiles: "valkey,pgbouncer,memcached"
          - profile_name: minimal
            compose_profiles: ""
    env:
      TEST_COMPOSE_PROFILES: ${{ matrix.compose_profiles }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Sync dependencies
        run: uv sync --dev

      - name: Run core_data smoke workflow
        run: uv run python -m pytest -k full_workflow

      - name: Docker diagnostics
        if: failure()
        run: |
          docker ps -a
          docker compose logs || true

      - name: Upload generated backups
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backups-${{ matrix.profile_name }}
          path: backups
          if-no-files-found: ignore

  markers:
    name: Marker (${{ matrix.marker }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        marker: [security, backup, extensions, pool, lint, config]
    env:
      TEST_COMPOSE_PROFILES: "valkey,pgbouncer,memcached"
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Install shellcheck
        if: matrix.marker == 'lint'
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck

      - name: Sync dependencies
        run: uv sync --dev

      - name: Run marker tests
        run: uv run python -m pytest -m ${{ matrix.marker }}

      - name: Docker diagnostics
        if: failure()
        run: |
          docker ps -a
          docker compose logs || true
