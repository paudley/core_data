# SPDX-FileCopyrightText: 2025 Blackcat InformaticsÂ® Inc.
# SPDX-License-Identifier: MIT

x-logging-default: &logging_defaults
  driver: local
  options:
    max-size: ${POSTGRES_LOG_MAX_SIZE}
    max-file: "${POSTGRES_LOG_MAX_FILE}"
    mode: ${POSTGRES_LOG_MODE}
    max-buffer-size: ${POSTGRES_LOG_BUFFER}
    compress: "true"

x-security-defaults: &security_defaults
  cap_drop:
    - ALL

services:
  volume_prep:
    image: ${POSTGRES_IMAGE_NAME:-core_data/postgres}:${POSTGRES_IMAGE_TAG:-17.2-bookworm-core}
    container_name: ${COMPOSE_PROJECT_NAME:-core_data}_volume_prep
    restart: "no"
    # Runs as root briefly to fix ownership; uses Docker's default capabilities.
    user: "0:0"
    environment:
      PGDATA_MOUNT: ${POSTGRES_DATA_MOUNT_PATH}
      PGWAL_MOUNT: ${POSTGRES_WAL_MOUNT_PATH}
      PGBACKREST_MOUNT: ${POSTGRES_BACKREST_MOUNT_PATH}
    command:
      [
        "/bin/sh",
        "-c",
        "chown -R ${POSTGRES_UID:-999}:${POSTGRES_GID:-999} $${PGDATA_MOUNT} $${PGWAL_MOUNT} $${PGBACKREST_MOUNT}"
      ]
    volumes:
      - pgdata:${POSTGRES_DATA_MOUNT_PATH}
      - pgwal:${POSTGRES_WAL_MOUNT_PATH}
      - pgbackrest:${POSTGRES_BACKREST_MOUNT_PATH}
    networks:
      - core_data
    logging: *logging_defaults

  postgres:
    <<: *security_defaults
    build:
      context: .
      dockerfile: postgres/Dockerfile
      args:
        PG_VERSION: ${PG_VERSION}
        AGE_VERSION: ${AGE_VERSION:-master}
    image: ${POSTGRES_IMAGE_NAME:-core_data/postgres}:${POSTGRES_IMAGE_TAG:-17.2-bookworm-core}
    container_name: ${COMPOSE_PROJECT_NAME:-core_data}_postgres
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_SUPERUSER}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_superuser_password
      POSTGRES_SUPERUSER_PASSWORD_FILE: /run/secrets/postgres_superuser_password
      POSTGRES_DB: ${POSTGRES_DB}
      DATABASES_TO_CREATE: ${DATABASES_TO_CREATE}
      PGBOUNCER_AUTH_USER: ${PGBOUNCER_AUTH_USER}
      PGBOUNCER_STATS_USER: ${PGBOUNCER_STATS_USER}
      TZ: ${TZ}
      POSTGRES_LISTEN_ADDRESSES: ${POSTGRES_LISTEN_ADDRESSES}
      POSTGRES_MAX_CONNECTIONS: ${POSTGRES_MAX_CONNECTIONS}
      PG_SHARED_BUFFERS: ${PG_SHARED_BUFFERS}
      PG_EFFECTIVE_CACHE_SIZE: ${PG_EFFECTIVE_CACHE_SIZE}
      PG_WORK_MEM: ${PG_WORK_MEM}
      PG_MAINTENANCE_WORK_MEM: ${PG_MAINTENANCE_WORK_MEM}
      PG_RANDOM_PAGE_COST: ${PG_RANDOM_PAGE_COST}
      PG_EFFECTIVE_IO_CONCURRENCY: ${PG_EFFECTIVE_IO_CONCURRENCY}
      PG_MAX_WAL_SIZE: ${PG_MAX_WAL_SIZE}
      PG_MIN_WAL_SIZE: ${PG_MIN_WAL_SIZE}
      PG_WAL_KEEP_SIZE: ${PG_WAL_KEEP_SIZE}
      PG_MAX_WAL_SENDERS: ${PG_MAX_WAL_SENDERS}
      PG_CHECKPOINT_COMPLETION_TARGET: ${PG_CHECKPOINT_COMPLETION_TARGET}
      PG_LOG_MIN_DURATION_STATEMENT: ${PG_LOG_MIN_DURATION_STATEMENT}
      POSTGRES_SSL_ENABLED: ${POSTGRES_SSL_ENABLED}
      POSTGRES_SSL_CERT_FILE: ${POSTGRES_SSL_CERT_FILE}
      POSTGRES_SSL_KEY_FILE: ${POSTGRES_SSL_KEY_FILE}
      POSTGRES_SSL_SELF_SIGNED_SUBJECT: ${POSTGRES_SSL_SELF_SIGNED_SUBJECT}
      POSTGRES_SSL_SELF_SIGNED_DAYS: ${POSTGRES_SSL_SELF_SIGNED_DAYS}
      POSTGRES_INITDB_WALDIR: /var/lib/postgresql/wal
    volumes:
      - pgdata:${POSTGRES_DATA_MOUNT_PATH}
      - pgwal:${POSTGRES_WAL_MOUNT_PATH}
      - pgbackrest:${POSTGRES_BACKREST_MOUNT_PATH}
      - ./backups:/backups
      - ./postgres/conf:/opt/core_data/conf:ro
      - ./postgres/initdb:/docker-entrypoint-initdb.d:ro
      - ./scripts:/opt/core_data/scripts:ro
      - ./secrets/postgres_superuser_password:/run/secrets/postgres_superuser_password:ro
      - ./secrets/pgbouncer_auth_password:/run/secrets/pgbouncer_auth_password:ro
      - ./secrets/pgbouncer_stats_password:/run/secrets/pgbouncer_stats_password:ro
    networks:
      - core_data
    depends_on:
      volume_prep:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD-SHELL", "/opt/core_data/scripts/healthcheck.sh"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    stop_grace_period: 1m
    shm_size: ${POSTGRES_SHM_SIZE}
    mem_limit: ${POSTGRES_MEMORY_LIMIT}
    cpus: ${POSTGRES_CPU_LIMIT}
    logging: *logging_defaults

  pghero:
    <<: *security_defaults
    image: ankane/pghero:latest
    container_name: ${COMPOSE_PROJECT_NAME:-core_data}_pghero
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: ["/bin/sh", "/opt/core_data/scripts/pghero_entrypoint.sh"]
    environment:
      PGHERO_USERNAME: ${PGHERO_USER}
      PGHERO_PASSWORD: ${PGHERO_PASSWORD}
      POSTGRES_SUPERUSER: ${POSTGRES_SUPERUSER}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres
      POSTGRES_SUPERUSER_PASSWORD_FILE: /run/secrets/postgres_superuser_password
      TZ: ${TZ}
    ports:
      - "${PGHERO_PORT}:8080"
    networks:
      - core_data
    volumes:
      - ./scripts/pghero_entrypoint.sh:/opt/core_data/scripts/pghero_entrypoint.sh:ro
      - ./secrets/postgres_superuser_password:/run/secrets/postgres_superuser_password:ro
    logging: *logging_defaults

  logical_backup:
    <<: *security_defaults
    image: ${POSTGRES_IMAGE_NAME:-core_data/postgres}:${POSTGRES_IMAGE_TAG:-17.2-bookworm-core}
    container_name: ${COMPOSE_PROJECT_NAME:-core_data}_logical_backup
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    command: ["/opt/core_data/scripts/logical_backup_runner.sh"]
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_SUPERUSER: ${POSTGRES_SUPERUSER}
      POSTGRES_SUPERUSER_PASSWORD_FILE: /run/secrets/postgres_superuser_password
      LOGICAL_BACKUP_INTERVAL_SECONDS: ${LOGICAL_BACKUP_INTERVAL_SECONDS}
      LOGICAL_BACKUP_RETENTION_DAYS: ${LOGICAL_BACKUP_RETENTION_DAYS}
      LOGICAL_BACKUP_OUTPUT: ${LOGICAL_BACKUP_OUTPUT}
      TZ: ${TZ}
    volumes:
      - ./backups:/backups
      - ./scripts/logical_backup_runner.sh:/opt/core_data/scripts/logical_backup_runner.sh:ro
      - ./secrets/postgres_superuser_password:/run/secrets/postgres_superuser_password:ro
    networks:
      - core_data
    logging: *logging_defaults

  valkey:
    <<: *security_defaults
    image: valkey/valkey:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-core_data}_valkey
    restart: unless-stopped
    profiles:
      - valkey
    environment:
      VALKEY_PORT: ${VALKEY_PORT}
      VALKEY_APPENDONLY: ${VALKEY_APPENDONLY}
      VALKEY_MAXMEMORY: ${VALKEY_MAXMEMORY}
      VALKEY_MAXMEMORY_POLICY: ${VALKEY_MAXMEMORY_POLICY}
      VALKEY_DATABASES: ${VALKEY_DATABASES}
      VALKEY_PASSWORD_FILE: /run/secrets/valkey_password
    command: ["/opt/core_data/valkey-entrypoint.sh"]
    volumes:
      - valkey_data:/data
      - ./valkey/entrypoint.sh:/opt/core_data/valkey-entrypoint.sh:ro
      - ./secrets/valkey_password:/run/secrets/valkey_password:ro
    networks:
      - core_data
    ports:
      - "${VALKEY_PORT}:6379"
    healthcheck:
      test: ["CMD-SHELL", "REDISCLI_AUTH=$(cat /run/secrets/valkey_password) valkey-cli -h 127.0.0.1 -p ${VALKEY_PORT} ping | grep -q PONG"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *logging_defaults

  pgbouncer:
    <<: *security_defaults
    image: bitnami/pgbouncer:1.23.0
    container_name: ${COMPOSE_PROJECT_NAME:-core_data}_pgbouncer
    restart: unless-stopped
    profiles:
      - pgbouncer
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_PORT: "5432"
      PGBOUNCER_PORT: ${PGBOUNCER_PORT}
      PGBOUNCER_POOL_MODE: ${PGBOUNCER_POOL_MODE}
      PGBOUNCER_MAX_CLIENT_CONN: ${PGBOUNCER_MAX_CLIENT_CONN}
      PGBOUNCER_DEFAULT_POOL_SIZE: ${PGBOUNCER_DEFAULT_POOL_SIZE}
      PGBOUNCER_RESERVE_POOL_SIZE: ${PGBOUNCER_RESERVE_POOL_SIZE}
      PGBOUNCER_RESERVE_POOL_TIMEOUT: ${PGBOUNCER_RESERVE_POOL_TIMEOUT}
      PGBOUNCER_MIN_POOL_SIZE: ${PGBOUNCER_MIN_POOL_SIZE}
      PGBOUNCER_ADMIN_USERS: ${PGBOUNCER_ADMIN_USERS}
      PGBOUNCER_STATS_USERS: ${PGBOUNCER_STATS_USERS}
      PGBOUNCER_STATS_USER: ${PGBOUNCER_STATS_USER}
      PGBOUNCER_AUTH_USER: ${PGBOUNCER_AUTH_USER}
      PGBOUNCER_AUTH_PASSWORD_FILE: /run/secrets/pgbouncer_auth_password
    entrypoint: ["/opt/core_data/pgbouncer-entrypoint.sh"]
    volumes:
      - ./pgbouncer/pgbouncer.ini.tpl:/opt/core_data/pgbouncer.ini.tpl:ro
      - ./pgbouncer/entrypoint.sh:/opt/core_data/pgbouncer-entrypoint.sh:ro
      - ./pgbouncer/userlist.txt.tpl:/opt/core_data/userlist.txt.tpl:ro
      - ./secrets/pgbouncer_auth_password:/run/secrets/pgbouncer_auth_password:ro
      - ./secrets/pgbouncer_stats_password:/run/secrets/pgbouncer_stats_password:ro
    networks:
      - core_data
    ports:
      - "${PGBOUNCER_PORT}:6432"
    healthcheck:
      test: ["CMD-SHELL", "pgrep pgbouncer >/dev/null"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *logging_defaults

  memcached:
    <<: *security_defaults
    image: memcached:1.6-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-core_data}_memcached
    restart: unless-stopped
    profiles:
      - memcached
    command:
      - memcached
      - -m
      - "${MEMCACHED_MEMORY_MB}"
      - -c
      - "${MEMCACHED_MAX_CONNECTIONS}"
      - -t
      - "${MEMCACHED_THREADS}"
      - -o
      - modern
    networks:
      - core_data
    ports:
      - "${MEMCACHED_PORT}:11211"
    healthcheck:
      test: ["CMD-SHELL", "printf 'version\\r\\n' | nc -w 2 127.0.0.1 11211 | grep -qi memcached"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging: *logging_defaults

networks:
  core_data:
    name: ${DOCKER_NETWORK_NAME}
    driver: bridge
    ipam:
      config:
        - subnet: ${DOCKER_NETWORK_SUBNET}

volumes:
  pgdata:
  pgwal:
  pgbackrest:
  valkey_data:
